package lsmt

import (
	"bytes"
	"fmt"
	"os"
	"testing"
	"time"

	"kvdb/utils"
)

var (
	// ÂàùÂßãÂåñopt
	opt = &Options{
		WorkDir:             "../work_test",
		SSTableMaxSz:        1024,
		MemTableSize:        1024,
		BlockSize:           1024,
		BloomFalsePositive:  0,
		BaseLevelSize:       10 << 20,
		LevelSizeMultiplier: 10,
		BaseTableSize:       2 << 20,
		TableSizeMultiplier: 2,
		NumLevelZeroTables:  15,
		MaxLevelNum:         7,
		NumCompactors:       3,
	}
)

// TestBase Ê≠£Á°ÆÊÄßÊµãËØï
func TestBase(t *testing.T) {
	clearDir()
	lsm := buildLSM()

	test := func() {
		// Âü∫ÂáÜÊµãËØï
		baseTest(t, lsm, 128)
	}
	// ËøêË°åNÊ¨°ÊµãËØïÂ§ö‰∏™sstÁöÑÂΩ±Âìç
	runTest(1, test)
}

// TestClose ÊµãËØï‰ºòÈõÖÂÖ≥Èó≠
func TestClose(t *testing.T) {
	clearDir()
	lsm := buildLSM()
	lsm.StartCompacter()
	test := func() {
		baseTest(t, lsm, 128)
		utils.Err(lsm.Close())
		// ÈáçÂêØÂêéÂèØÊ≠£Â∏∏Â∑•‰ΩúÊâçÁÆóÊàêÂäü
		lsm = buildLSM()
		baseTest(t, lsm, 128)
	}
	// ËøêË°åNÊ¨°ÊµãËØïÂ§ö‰∏™sstÁöÑÂΩ±Âìç
	runTest(1, test)
}

// ÂëΩ‰∏≠‰∏çÂêåÂ≠òÂÇ®‰ªãË¥®ÁöÑÈÄªËæëÂàÜÊîØÊµãËØï
func TestHitStorage(t *testing.T) {
	clearDir()
	lsm := buildLSM()
	e := utils.BuildEntry()
	lsm.Set(e)
	// ÂëΩ‰∏≠ÂÜÖÂ≠òË°®
	hitMemtable := func() {
		v, err := lsm.memtable.Get(e.Key)
		utils.Err(err)
		utils.CondPanic(!bytes.Equal(v.Value, e.Value), fmt.Errorf("[hitMemtable] !equal(v.Value, e.Value)"))
	}
	// ÂëΩ‰∏≠L0Â±Ç
	hitL0 := func() {
		// baseTestÁöÑÊµãËØïÂ∞±ÂåÖÂê´ Âú®ÂëΩ‰∏≠L0ÁöÑsstÊü•ËØ¢
		baseTest(t, lsm, 128)
	}
	// ÂëΩ‰∏≠ÈùûL0Â±Ç
	hitNotL0 := func() {
		// ÈÄöËøáÂéãÁº©Â∞ÜcompactÁîüÊàêÈùûL0Êï∞ÊçÆ, ‰ºöÂëΩ‰∏≠l6Â±Ç
		lsm.levels.runOnce(0)
		baseTest(t, lsm, 128)
	}
	// ÂëΩ‰∏≠bf
	hitBloom := func() {
		ee := utils.BuildEntry()
		// Êü•ËØ¢‰∏çÂ≠òÂú®ÁöÑkey Â¶ÇÊûúÂëΩ‰∏≠ÂàôËØ¥Êòé‰∏ÄÂÆö‰∏çÂ≠òÂú®
		v, err := lsm.levels.levels[0].tables[0].Search(ee.Key, &ee.Version)
		utils.CondPanic(v != nil, fmt.Errorf("[hitBloom] v != nil"))
		utils.CondPanic(err != utils.ErrKeyNotFound, fmt.Errorf("[hitBloom] err != utils.ErrKeyNotFound"))
	}

	runTest(1, hitMemtable, hitL0, hitNotL0, hitBloom)
}

// Testparameter ÊµãËØïÂºÇÂ∏∏ÂèÇÊï∞
func TestPsarameter(t *testing.T) {
	clearDir()
	lsm := buildLSM()
	testNil := func() {
		utils.CondPanic(lsm.Set(nil) != utils.ErrEmptyKey, fmt.Errorf("[testNil] lsm.Set(nil) != err"))
		_, err := lsm.Get(nil)
		utils.CondPanic(err != utils.ErrEmptyKey, fmt.Errorf("[testNil] lsm.Set(nil) != err"))
	}
	// TODO p2 ‰ºòÂÖàÁ∫ßÁöÑcaseÂÖàÂøΩÁï•
	runTest(1, testNil)
}

// TestCompact ÊµãËØïL0Âà∞LmaxÂéãÁº©
func TestCompact(t *testing.T) {
	clearDir()
	lsm := buildLSM()
	ok := false
	l0TOLMax := func() {
		fmt.Println("l0TOLMax")
		// Ê≠£Â∏∏Ëß¶ÂèëÂç≥ÂèØ
		baseTest(t, lsm, 128)
		// Áõ¥Êé•Ëß¶ÂèëÂéãÁº©ÊâßË°å
		fid := lsm.levels.maxFID + 1
		lsm.levels.runOnce(1)
		for _, t := range lsm.levels.levels[6].tables {
			if t.fid == fid {
				ok = true
			}
		}
		utils.CondPanic(!ok, fmt.Errorf("[l0TOLMax] fid not found"))
		fmt.Println("l0TOLMax Done")
	}
	l0ToL0 := func() {
		fmt.Println("l0ToL0")
		// ÂÖàÂÜô‰∏Ä‰∫õÊï∞ÊçÆËøõÊù•
		baseTest(t, lsm, 128)
		fid := lsm.levels.maxFID + 1
		cd := buildCompactDef(lsm, 0, 0, 0)
		// ÈùûÂ∏∏trickyÁöÑÂ§ÑÁêÜÊñπÊ≥ïÔºå‰∏∫‰∫ÜËÉΩÈÄöËøáÊ£ÄÊü•
		tricky(cd.thisLevel.tables)
		ok := lsm.levels.fillTablesL0ToL0(cd)
		utils.CondPanic(!ok, fmt.Errorf("[l0ToL0] lsm.levels.fillTablesL0ToL0(cd) ret == false"))
		err := lsm.levels.runCompactDef(0, 0, *cd)
		// Âà†Èô§ÂÖ®Â±ÄÁä∂ÊÄÅÔºå‰æø‰∫é‰∏ãÊ∏∏ÊµãËØïÈÄªËæë
		lsm.levels.compactState.delete(cd)
		utils.Err(err)
		ok = false
		for _, t := range lsm.levels.levels[0].tables {
			if t.fid == fid {
				ok = true
			}
		}
		utils.CondPanic(!ok, fmt.Errorf("[l0ToL0] fid not found"))
		fmt.Println("l0ToL0 Done")
	}
	nextCompact := func() {
		fmt.Println("nextCompact")
		baseTest(t, lsm, 128)
		fid := lsm.levels.maxFID + 1
		cd := buildCompactDef(lsm, 0, 0, 1)
		// ÈùûÂ∏∏trickyÁöÑÂ§ÑÁêÜÊñπÊ≥ïÔºå‰∏∫‰∫ÜËÉΩÈÄöËøáÊ£ÄÊü•
		tricky(cd.thisLevel.tables)
		ok := lsm.levels.fillTables(cd)
		utils.CondPanic(!ok, fmt.Errorf("[nextCompact] lsm.levels.fillTables(cd) ret == false"))
		err := lsm.levels.runCompactDef(0, 0, *cd)
		// Âà†Èô§ÂÖ®Â±ÄÁä∂ÊÄÅÔºå‰æø‰∫é‰∏ãÊ∏∏ÊµãËØïÈÄªËæë
		lsm.levels.compactState.delete(cd)
		utils.Err(err)
		ok = false
		for _, t := range lsm.levels.levels[1].tables {
			if t.fid == fid {
				ok = true
			}
		}
		utils.CondPanic(!ok, fmt.Errorf("[nextCompact] fid not found"))
		fmt.Println("nextCompact Done")
	}

	maxToMax := func() {
		fmt.Println("maxToMax")
		baseTest(t, lsm, 128)
		fid := lsm.levels.maxFID + 1
		cd := buildCompactDef(lsm, 6, 6, 6)
		// ÈùûÂ∏∏trickyÁöÑÂ§ÑÁêÜÊñπÊ≥ïÔºå‰∏∫‰∫ÜËÉΩÈÄöËøáÊ£ÄÊü•
		tricky(cd.thisLevel.tables)
		ok := lsm.levels.fillTables(cd)
		utils.CondPanic(!ok, fmt.Errorf("[maxToMax] lsm.levels.fillTables(cd) ret == false"))
		err := lsm.levels.runCompactDef(0, 6, *cd)

		// Âà†Èô§ÂÖ®Â±ÄÁä∂ÊÄÅÔºå‰æø‰∫é‰∏ãÊ∏∏ÊµãËØïÈÄªËæë
		lsm.levels.compactState.delete(cd)
		utils.Err(err)
		ok = false
		for _, t := range lsm.levels.levels[6].tables {
			if t.fid == fid {
				ok = true
			}
		}
		utils.CondPanic(!ok, fmt.Errorf("[maxToMax] fid not found"))
		fmt.Println("maxToMax Done")
	}
	parallerCompact := func() {
		fmt.Println("parallerCompact")
		baseTest(t, lsm, 128)
		cd := buildCompactDef(lsm, 0, 0, 1)
		// ÈùûÂ∏∏trickyÁöÑÂ§ÑÁêÜÊñπÊ≥ïÔºå‰∏∫‰∫ÜËÉΩÈÄöËøáÊ£ÄÊü•
		tricky(cd.thisLevel.tables)
		ok := lsm.levels.fillTables(cd)
		utils.CondPanic(!ok, fmt.Errorf("[parallerCompact] lsm.levels.fillTables(cd) ret == false"))
		// ÊûÑÂª∫ÂÆåÂÖ®Áõ∏Âêå‰∏§‰∏™ÂéãÁº©ËÆ°ÂàíÁöÑÊâßË°åÔºå‰ª•‰æø‰∫éÁôæÂàÜÊØîÊûÑÂª∫ ÂéãÁº©ÂÜ≤Á™Å
		go lsm.levels.runCompactDef(0, 0, *cd)
		lsm.levels.runCompactDef(0, 0, *cd)
		// Ê£ÄÊü•compact statusÁä∂ÊÄÅÊü•ÁúãÊòØÂê¶Âú®ÊâßË°åÂπ∂Ë°åÂéãÁº©
		isParaller := false
		for _, state := range lsm.levels.compactState.levels {
			if len(state.ranges) != 0 {
				isParaller = true
			}
		}
		utils.CondPanic(!isParaller, fmt.Errorf("[parallerCompact] not is paralle"))
		fmt.Println("parallerCompact Done")
	}
	// ËøêË°åNÊ¨°ÊµãËØïÂ§ö‰∏™sstÁöÑÂΩ±Âìç
	runTest(1, l0TOLMax, l0ToL0, nextCompact, maxToMax, parallerCompact)
}

// Ê≠£Á°ÆÊÄßÊµãËØï
func baseTest(t *testing.T, lsm *LSM, n int) {
	// Áî®Êù•Ë∑üË∏™Ë∞ÉËØïÁöÑ
	e := &utils.Entry{
		Key:   []byte("HelloüòÅÁÜäÁé∫ÁöìWeChat ÔºöChristmas_relation"),
		Value: []byte("ÊàëËçâ‰∫Ü"),
		TTL:   123,
	}
	//caseList := make([]*utils.Entry, 0)
	//caseList = append(caseList, e)

	// ÈöèÊú∫ÊûÑÂª∫Êï∞ÊçÆËøõË°åÊµãËØï
	lsm.Set(e)
	for i := 1; i < n; i++ {
		ee := utils.BuildEntry()
		lsm.Set(ee)
		// caseList = append(caseList, ee)
	}
	// ‰ªélevels‰∏≠ËøõË°åGET
	v, err := lsm.Get(e.Key)
	utils.Panic(err)
	utils.CondPanic(!bytes.Equal(e.Value, v.Value), fmt.Errorf("lsm.Get(e.Key) value not equal !!!"))
	// TODO rangeÂäüËÉΩÂæÖÂÆåÂñÑ
	//retList := make([]*utils.Entry, 0)
	// testRange := func(isAsc bool) {
	// 	// Range Á°Æ‰øùÂÜôÂÖ•ËøõÂéªÁöÑÊØè‰∏™lsmÈÉΩÂèØ‰ª•Ë¢´ËØªÂèñÂà∞
	// 	iter := lsm.NewIterator(&utils.Options{IsAsc: true})
	// 	for iter.Rewind(); iter.Valid(); iter.Next() {
	// 		e := iter.Item().Entry()
	// 		retList = append(retList, e)
	// 	}
	// 	utils.CondPanic(len(retList) != len(caseList), fmt.Errorf("len(retList) != len(caseList)"))
	// 	sort.Slice(retList, func(i, j int) bool {
	// 		return utils.CompareKeys(retList[i].Key, retList[j].Key) > 1
	// 	})
	// 	for i := 0; i < len(caseList); i++ {
	// 		a, b := caseList[i], retList[i]
	// 		if !equal(a.Key, b.Key) || !equal(a.Value, b.Value) || a.ExpiresAt != b.ExpiresAt {
	// 			utils.Panic(fmt.Errorf("lsm.Get(e.Key) kv disagreement !!!"))
	// 		}
	// 	}
	// }
	// // ÊµãËØïÂçáÂ∫è
	// testRange(true)
	// // ÊµãËØïÈôçÂ∫è
	// testRange(false)
}

// È©±Âä®Ê®°Âùó
func buildLSM() *LSM {
	// init DB Basic Test
	c := make(chan map[uint32]int64, 16)
	opt.DiscardStatsCh = &c
	lsm := NewLSM(opt)
	return lsm
}

// ËøêË°åÊµãËØïÁî®‰æã
func runTest(n int, testFunList ...func()) {
	for _, f := range testFunList {
		for i := 0; i < n; i++ {
			f()
		}
	}
}

// ÊûÑÂª∫compactDefÂØπË±°
func buildCompactDef(lsm *LSM, id, thisLevel, nextLevel int) *compactDef {
	t := targets{
		targetSz:  []int64{0, 10485760, 10485760, 10485760, 10485760, 10485760, 10485760},
		fileSz:    []int64{1024, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152},
		baseLevel: nextLevel,
	}
	def := &compactDef{
		compactorID: id,
		thisLevel:   lsm.levels.levels[thisLevel],
		nextLevel:   lsm.levels.levels[nextLevel],
		ts:          t,
		cp:          buildCompactionPriority(lsm, thisLevel, t),
	}
	return def
}

// ÊûÑÂª∫CompactionPriorityÂØπË±°
func buildCompactionPriority(lsm *LSM, thisLevel int, t targets) compactionPriority {
	return compactionPriority{
		level:    thisLevel,
		score:    8.6,
		adjusted: 860,
		ts:       t,
	}
}

func tricky(tables []*table) {
	// ÈùûÂ∏∏trickyÁöÑÂ§ÑÁêÜÊñπÊ≥ïÔºå‰∏∫‰∫ÜËÉΩÈÄöËøáÊ£ÄÊü•ÔºåÊ£ÄÊü•ÊâÄÊúâÈÄªËæëÂàÜÊîØ
	for _, table := range tables {
		table.sst.GetIndexs().StaleDataSize = 10 << 20
		t, _ := time.Parse("2006-01-02 15:04:05", "1995-08-10 00:00:00")
		table.sst.SetCreatedAt(&t)
	}
}
func clearDir() {
	_, err := os.Stat(opt.WorkDir)
	if err == nil {
		os.RemoveAll(opt.WorkDir)
	}
	os.Mkdir(opt.WorkDir, os.ModePerm)
}
